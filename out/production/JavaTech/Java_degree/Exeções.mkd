Código Java completo e funcional que demonstra o tratamento de exceções na prática. O exemplo inclui o uso de `try`, `catch`, `finally`, além de criar uma exceção personalizada.

### Código: Tratamento de Exceções

```java
import java.util.InputMismatchException;
import java.util.Scanner;

// Exceção personalizada
class DivisaoPorZeroException extends Exception {
    public DivisaoPorZeroException(String message) {
        super(message);
    }
}

public class ExemploTratamentoExcecoes {
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            // Tentativa de leitura de números inteiros
            System.out.print("Digite o primeiro número: ");
            int num1 = scanner.nextInt();
            
            System.out.print("Digite o segundo número: ");
            int num2 = scanner.nextInt();
            
            // Verificação se num2 é zero para lançar exceção personalizada
            if (num2 == 0) {
                throw new DivisaoPorZeroException("Erro: Tentativa de divisão por zero.");
            }
            
            // Realiza a divisão
            int resultado = dividir(num1, num2);
            System.out.println("Resultado da divisão: " + resultado);
            
        } catch (DivisaoPorZeroException e) {
            System.out.println("Exceção capturada: " + e.getMessage());
        } catch (InputMismatchException e) {
            // Captura se o usuário digitar algo que não seja um número inteiro
            System.out.println("Erro: Você deve digitar um número inteiro.");
        } catch (Exception e) {
            // Captura qualquer outro tipo de exceção
            System.out.println("Ocorreu um erro: " + e.getMessage());
        } finally {
            // Bloco que sempre é executado
            System.out.println("Finalizando o programa. Obrigado!");
            scanner.close(); // Fecha o Scanner
        }
    }
    
    // Método que realiza a divisão entre dois números inteiros
    public static int dividir(int num1, int num2) {
        return num1 / num2;
    }
}
```

### Explicação do Código:

1. **Exceção Personalizada (`DivisaoPorZeroException`)**:
   - Criei uma exceção personalizada que é lançada quando o usuário tenta dividir por zero.

2. **Bloco `try-catch-finally`**:
   - **`try`**: O bloco onde tentamos ler os números e realizar a divisão.
   - **`catch`**: Captura as exceções. Existem três tipos de exceções capturadas:
     - **`DivisaoPorZeroException`**: É lançada manualmente se o divisor for zero.
     - **`InputMismatchException`**: Captura erros de entrada, como quando o usuário digita algo que não é um número inteiro.
     - **`Exception`**: Um `catch` geral para qualquer outra exceção que não seja as especificadas acima.
   - **`finally`**: Sempre é executado, independentemente de uma exceção ser lançada ou não. Usado aqui para fechar o `Scanner` e liberar recursos.

3. **Uso de Exceções**:
   - O método `dividir` faz uma divisão simples entre dois números inteiros.
   - Se o divisor for zero, a exceção personalizada `DivisaoPorZeroException` é lançada.
   - Caso o usuário insira algo inválido (como letras), a exceção `InputMismatchException` é capturada.

### Teste o Código:
- Se você tentar dividir por zero, o programa capturará a exceção personalizada.
- Se você inserir algo que não seja um número, o programa capturará a exceção de entrada inválida.
- Caso contrário, ele fará a divisão corretamente e exibirá o resultado.

Esse exemplo cobre o tratamento básico de exceções e a criação de exceções personalizadas, algo muito útil em projetos reais para lidar com erros de forma controlada.

