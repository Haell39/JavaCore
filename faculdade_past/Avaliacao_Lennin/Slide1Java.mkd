### Foco nos Tópicos do PDF: Aula 01 - POO

#### **Constantes:**
- **Definição:** Em Java, uma constante é um valor fixo que não pode ser alterado durante a execução do programa.
- **Declaração:** As constantes são declaradas usando as palavras-chave `static final` antes do tipo da variável. Por convenção, o nome das constantes é escrito em **letras maiúsculas** para distingui-las das variáveis.
  - **Exemplo:**
    ```java
    public static final float PI = 3.1416F;
    ```
  - As constantes são criadas fora dos métodos, diretamente na classe, por isso utilizamos o modificador de acesso `public`.

#### **String:**
- **Classe String:** Em Java, **String** não é um tipo primitivo, mas uma classe que possui suporte especial. Mesmo sendo uma classe, pode ser usada como se fosse um tipo primitivo.
  - **Declaração de String:**
    ```java
    String nome = "Faculdade Imaculada Conceição de Recife";
    ```
  - Strings são **imutáveis**, o que significa que uma vez criadas, seu valor não pode ser alterado. Para modificar uma String, cria-se um novo objeto.

#### **Conversão de Tipos:**
- Em algumas aplicações, é necessário **converter** tipos primitivos em outros, como de `int` para `double`.
- **Tipos de Conversão:**
  - **Conversão implícita (Widening):** Ocorre quando você converte um tipo menor para um tipo maior, como de `int` para `double`. Isso acontece automaticamente.
    ```java
    int num = 10;
    double valor = num;  // Conversão implícita
    ```
  - **Conversão explícita (Narrowing):** Quando converte um tipo maior para um tipo menor, é necessário fazer uma conversão explícita usando cast:
    ```java
    double valor = 10.5;
    int num = (int) valor;  // Conversão explícita
    ```
  
#### **System.out:**
- **System.out** é usado para **exibir dados** no console. Ele representa a saída padrão em Java.
  - **Principais Métodos de Saída:**
    - **print():** Exibe a saída na mesma linha.
    - **println():** Exibe a saída e move o cursor para a próxima linha.
    - **printf():** Permite formatar a saída de acordo com o tipo de dado. Utiliza-se placeholders para formatar valores.
      - **Exemplo de printf():**
        ```java
        System.out.printf("O valor de PI é: %.2f", 3.14159);
        ```
      - **Caracteres de escape** podem ser usados para adicionar formatações especiais. Exemplo: `\n` (nova linha), `\t` (tabulação).

#### **Scanner:**
- A classe **Scanner** é usada para **ler dados** do console (entrada via teclado). Para utilizá-la, é necessário importar a biblioteca `java.util.Scanner`.
  - **Declaração de um Scanner:**
    ```java
    import java.util.Scanner;
    Scanner scanner = new Scanner(System.in);
    ```
  - **Leitura de Dados:**
    Para ler dados de diferentes tipos, o Scanner possui métodos específicos:
    - **nextInt():** Lê um número inteiro.
    - **nextDouble():** Lê um número com ponto flutuante.
    - **nextLine():** Lê uma linha completa de texto.
    - **Exemplo de uso:**
      ```java
      System.out.print("Digite seu nome: ");
      String nome = scanner.nextLine();
      System.out.println("Olá, " + nome);
      ```

#### **Operadores:**
- **Operadores Aritméticos:**
  - Usados para realizar operações matemáticas básicas:
    - `+` (soma)
    - `-` (subtração)
    - `*` (multiplicação)
    - `/` (divisão)
    - `%` (módulo, resto da divisão inteira)
  - **Exemplo:**
    ```java
    int a = 10, b = 3;
    int soma = a + b;
    int resto = a % b;  // resto da divisão de 10 por 3
    ```

- **Operadores Relacionais:**
  - Comparam dois valores e retornam um resultado booleano (`true` ou `false`):
    - `==` (igual a)
    - `!=` (diferente de)
    - `>` (maior que)
    - `<` (menor que)
    - `>=` (maior ou igual a)
    - `<=` (menor ou igual a)
  - **Exemplo:**
    ```java
    boolean resultado = (a > b);  // Retorna true se a for maior que b
    ```

- **Operadores Lógicos:**
  - Combinam expressões booleanas:
    - `&&` (E lógico)
    - `||` (OU lógico)
    - `!` (NÃO lógico)
  - **Exemplo:**
    ```java
    boolean resultado = (a > b) && (a < 20);  // verdadeiro se ambas as condições forem verdadeiras
    ```

- **Operador Ternário:**
  - Substitui estruturas `if-else` simples. O operador ternário tem a sintaxe:
    ```java
    condição ? valorSeVerdadeiro : valorSeFalso;
    ```
  - **Exemplo:**
    ```java
    String resultado = (media >= 7) ? "Aprovado" : "Reprovado";
    ```

- **Operadores Unários:**
  - Aplicam-se a apenas um operando:
    - `++` (incremento)
    - `--` (decremento)
    - `!` (negação booleana)
  - **Exemplo:**
    ```java
    int x = 5;
    x++;  // incrementa x para 6
    boolean y = !true;  // y será false
    ```

Essa revisão detalhada dos principais tópicos vai te ajudar a dominar o conteúdo necessário para a prova de Java. Se precisar de mais alguma coisa, me avise!