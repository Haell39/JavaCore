Herança é um dos pilares mais importantes da Programação Orientada a Objetos (POO) e permite que uma classe (subclasse ou classe derivada) herde atributos e métodos de outra classe (superclasse ou classe base). Isso promove o **reaproveitamento de código**, facilitando a criação de sistemas extensíveis e modulares.

### **Motivo para Usar Herança:**
- **Reutilização de código:** Você pode definir funcionalidades comuns em uma superclasse e reutilizá-las em várias subclasses.
- **Facilidade de manutenção:** Alterações feitas na superclasse são refletidas automaticamente nas subclasses.
- **Organização hierárquica:** Facilita a modelagem de sistemas, criando relações de "é um" (ex.: um Cachorro **é um** Animal).

### **Exemplo Prático de Herança em Java:**

#### **Passo 1: Criando a Superclasse `Veiculo`**
Vamos criar uma superclasse chamada `Veiculo` que contém atributos e métodos comuns a todos os tipos de veículos.

```java
// Superclasse Veiculo
public class Veiculo {
    // Atributos comuns a todos os veículos
    private String marca;
    private String modelo;
    private int ano;

    // Construtor
    public Veiculo(String marca, String modelo, int ano) {
        this.marca = marca;
        this.modelo = modelo;
        this.ano = ano;
    }

    // Método comum a todos os veículos
    public void exibirDetalhes() {
        System.out.println("Marca: " + marca + ", Modelo: " + modelo + ", Ano: " + ano);
    }

    // Getters e Setters
    public String getMarca() {
        return marca;
    }

    public void setMarca(String marca) {
        this.marca = marca;
    }

    public String getModelo() {
        return modelo;
    }

    public void setModelo(String modelo) {
        this.modelo = modelo;
    }

    public int getAno() {
        return ano;
    }

    public void setAno(int ano) {
        this.ano = ano;
    }
}
```

#### **Passo 2: Criando as Subclasses `Carro` e `Moto`**
Agora, vamos criar as subclasses `Carro` e `Moto` que herdam de `Veiculo`. Elas vão herdar os atributos e métodos da classe `Veiculo`, mas também podem ter seus próprios atributos e métodos.

```java
// Subclasse Carro que herda de Veiculo
public class Carro extends Veiculo {
    private int portas;

    // Construtor da subclasse Carro
    public Carro(String marca, String modelo, int ano, int portas) {
        super(marca, modelo, ano);  // Chama o construtor da superclasse Veiculo
        this.portas = portas;
    }

    // Método específico de Carro
    public void exibirDetalhesCarro() {
        exibirDetalhes();  // Método herdado da superclasse
        System.out.println("Portas: " + portas);
    }
}

// Subclasse Moto que herda de Veiculo
public class Moto extends Veiculo {
    private boolean temCarenagem;

    // Construtor da subclasse Moto
    public Moto(String marca, String modelo, int ano, boolean temCarenagem) {
        super(marca, modelo, ano);  // Chama o construtor da superclasse Veiculo
        this.temCarenagem = temCarenagem;
    }

    // Método específico de Moto
    public void exibirDetalhesMoto() {
        exibirDetalhes();  // Método herdado da superclasse
        System.out.println("Tem carenagem: " + (temCarenagem ? "Sim" : "Não"));
    }
}
```

#### **Passo 3: Usando a Herança no Código**
Agora, podemos criar objetos das subclasses `Carro` e `Moto`, que vão herdar atributos e métodos da classe `Veiculo`, e também usar seus próprios métodos específicos.

```java
public class Main {
    public static void main(String[] args) {
        // Criando um objeto Carro
        Carro meuCarro = new Carro("Toyota", "Corolla", 2020, 4);
        meuCarro.exibirDetalhesCarro();  // Chama o método da subclasse Carro

        // Criando um objeto Moto
        Moto minhaMoto = new Moto("Honda", "CB500", 2018, true);
        minhaMoto.exibirDetalhesMoto();  // Chama o método da subclasse Moto
    }
}
```

### **Saída do Programa:**
```
Marca: Toyota, Modelo: Corolla, Ano: 2020
Portas: 4
Marca: Honda, Modelo: CB500, Ano: 2018
Tem carenagem: Sim
```

### **Como a Herança Funciona Aqui:**
1. **Superclasse `Veiculo`:**
   - Define os atributos e métodos que são comuns a todos os veículos, como `marca`, `modelo`, `ano` e o método `exibirDetalhes()`.
   
2. **Subclasses `Carro` e `Moto`:**
   - As subclasses herdam os atributos e métodos da superclasse. Isso significa que **não precisamos redefinir os atributos** `marca`, `modelo` e `ano` nem o método `exibirDetalhes()` nas subclasses.
   - Cada subclasse pode adicionar seus próprios atributos e métodos. No caso de `Carro`, temos o atributo `portas`, e para `Moto`, temos o atributo `temCarenagem`.

3. **Uso do `super()`:**
   - O construtor das subclasses (`Carro` e `Moto`) chama o construtor da superclasse `Veiculo` usando a palavra-chave `super()`. Isso garante que os atributos herdados sejam inicializados corretamente.

### **Por que Usar Herança?**
- **Reutilização de código:** A classe `Veiculo` encapsula os atributos e métodos que são comuns a todos os veículos, evitando a duplicação de código nas subclasses.
- **Facilidade de manutenção:** Se precisarmos alterar algo relacionado a veículos em geral, podemos fazer isso na superclasse, e essas alterações se refletirão automaticamente em todas as subclasses.
- **Organização lógica:** Herança permite criar uma hierarquia de classes que reflete a estrutura do mundo real. No exemplo, `Carro` e `Moto` são tipos específicos de `Veiculo`.

### **Resumo:**
- **Herança** permite que uma classe (`Carro`, `Moto`) herde os atributos e métodos de outra classe (`Veiculo`), promovendo a reutilização de código e uma estrutura de software organizada.
- **Superclasse** (`Veiculo`): Contém os atributos e métodos comuns a todas as subclasses.
- **Subclasse** (`Carro`, `Moto`): Herdam os atributos e métodos da superclasse, podendo adicionar seus próprios comportamentos específicos.

Se precisar de mais exemplos ou de explicações sobre outro conceito, estou à disposição!